class Solution {
    public int rob(int[] nums) {
// Total Loot if robbed (n - 2) (if robbing the last house)= total_loot[n - 2] + total_loot[n]
// Total Loot if robbed (n - 1)(if not robbing the last house) = total_loot[n - 1]
// Total loot at house n = Max (total_loot[n - 2] + total_loot[n], total_loot[n - 1] )
// [2, 7, 3, 1, 4, 2, 1, 8]
// Memoization : [2, 7, 7, 8, 11, 11, 19]
        if(nums.length < 2) return nums[0];
        int[] dp = new int [nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for(int i = 2; i < nums.length; i++){
            dp[i] = Math.max(dp[i - 2] + nums [i], dp[i - 1]);
        } 
        return dp[nums.length - 1];   
    }
}
