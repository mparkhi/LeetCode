
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
// Approach 1 - Hare and Tortoise algorithm
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null){
             slow = slow.next;
             fast = fast.next.next;
        }
        return slow;
    }
}
// Approach 2 - Iterative Approach
class Solution {
    public static int size (ListNode head){
        int count = 0;
        while(head != null){
            head = head.next;
            count++;
        }
        return count;
    }
    public ListNode middleNode(ListNode head) {
        ListNode temp = head;
        int size = size(head);

        for(int i = 0; i < size/2 ; i++){
            temp = temp.next;
        }
        return temp;
    }
}
