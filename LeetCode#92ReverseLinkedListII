/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode swap(ArrayList<Integer> list, int left, int right){
        int i = left - 1;
        int j = right - 1;
        while(i < j){
            int temp = list.get(i);
            list.set(i, list.get(j));
            list.set(j, temp);
            i++;
            j--;
        }
        ListNode head = new ListNode(list.get(0));
        ListNode pointer = head;
        for(int k = 1; k < list.size(); k++){
            ListNode temp = new ListNode(list.get(k));
            pointer.next = temp;
            pointer = temp; 
        }
        return head;
    }
    
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ArrayList<Integer> list = new ArrayList<>();
        while(head != null){
            list.add(head.val);
            head = head.next;
        }
        ListNode result = swap(list, left, right);
        return result;
    }
}
