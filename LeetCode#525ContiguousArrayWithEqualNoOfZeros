class Solution {
    public int findMaxLength(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        int zeros = 0;
        int ones = 0;
        int maxLength = 0;
        for (int i = 0; i < nums.length;i++){
            if(nums[i] == 0) {
                zeros++;
            }else if(nums[i] == 1){
                ones++;
            }
            int diff = zeros - ones;

            if(map.containsKey(diff)){
                int index = map.get(diff);
                maxLength = Math.max(maxLength, i - map.get(diff));

            }else{
                map.put(diff, i);
            }
        }
        return maxLength;
    }
}

class Solution {
    public int findMaxLength(int[] nums) {
        int maxLength = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        int prefixSum = 0;

        for(int i = 0; i < nums.length ; i++){
            if(nums[i] == 0) {
                prefixSum += -1;
            }
            else if(nums[i] == 1){
                prefixSum += +1;
            }
            if(map.containsKey(prefixSum)){
                int index = map.get(prefixSum);
                int length = i - index;
                if(length > maxLength){
                    maxLength = length;
                }
            }
            else{
                map.put(prefixSum, i);

            }
            
        }
        return maxLength;
    }
}
