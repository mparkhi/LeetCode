// Approach 1. Convert Linked list to ArrayList and use two pointers to check if the palindrome condition is true
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        List<Integer> list = new ArrayList<>();
        while(head != null){
            list.add(head.val);
            head = head.next;
        }
        int start = 0;
        int end = list.size() - 1;
        while(start < end && list.get(start) == list.get(end)){
            start++;
            end--;
         }
         return start >= end;            
    }       
}
// Approach 2. Using Stack - First push all data in stack, and then traverse linked list and keep popping element from stack one by one, so stack will give you element from last.
class Solution {
    public boolean isPalindrome(ListNode head) {
        // List<Integer> list = new ArrayList<>();
        Stack<Integer> stack = new Stack<>();
        ListNode current = head;
        while(head != null){
            stack.push(head.val);
            head = head.next;
        }
        while(!stack.isEmpty() && stack.pop() == current.val){
            current = current.next;
        }
        return current == null;

    }
}

/*
Approach 3. Count all nodes first and then move to n/2th node, this would be middle node.
Use two pointer one will move with the speed of 1 and one with the speed of 2, so when the fast pointer reaches the end, slow pointer would be at mid.
After getting middle node, reverse the list after that node.
and then compare each element.
*
/
class Solution {
    public ListNode reverse(ListNode head){
        ListNode prev = null;
        ListNode curr = head;
        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode rev = reverse(slow.next);
        while(rev != null){
            if(head.val != rev.val){
                return false;
            }
            head = head.next;
            rev = rev.next;
        }
        return true;
    }
}
