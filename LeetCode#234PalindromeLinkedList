// Convert Linked list to ArrayList and use two pointers to check if the palindrome condition is true
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        List<Integer> list = new ArrayList<>();
        while(head != null){
            list.add(head.val);
            head = head.next;
        }
        int start = 0;
        int end = list.size() - 1;
        while(start < end && list.get(start) == list.get(end)){
            start++;
            end--;
         }
         return start >= end;            
    }       
}
// Using Stack - First push all data in stack, and then traverse linked list and keep popping element from stack one by one, so stack will give you element from last.
class Solution {
    public boolean isPalindrome(ListNode head) {
        // List<Integer> list = new ArrayList<>();
        Stack<Integer> stack = new Stack<>();
        ListNode current = head;
        while(head != null){
            stack.push(head.val);
            head = head.next;
        }
        while(!stack.isEmpty() && stack.pop() == current.val){
            current = current.next;
        }
        return current == null;

    }
}
