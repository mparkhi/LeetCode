class Solution {
    public int maxFrequencyElements(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int max = 0;
        for(int num : nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
            max = Math.max(max, map.get(num));     
        }
        int count = 0;
        
        for(int value : map.values()){   
            if(value == max){         
                count++;          
            }               
        }
        return max * count;
    }
}

class Solution {
    public int maxFrequencyElements(int[] nums) {
        int max = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int num : nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
            max = Math.max(max, map.get(num));
        }
        int result = 0;
        for(int value : map.values()){
            if(value == max){
                result = result + value;
            }
        }
        return result;
    }
}

class Solution {
    public int maxFrequencyElements(int[] nums) {
        int max = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int num : nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
            max = Math.max(max, map.get(num));
        }
        int result = 0;
        for(int key : map.keySet()){
            if(map.get(key) == max){
                result = result + map.get(key);
            }
        }
        return result;
    }
}
