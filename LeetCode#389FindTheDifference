// Approach 1 : Combine two strings , put the characters and their count in the map, check for the count of characters in the Map entries and if the count % 2 != 0, return the character 
class Solution {
    public char findTheDifference(String s, String t) {
        String z = s + t;
        HashMap<Character, Integer> map = new HashMap<>();
        for(char c : z.toCharArray()){
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        for(Map.Entry<Character, Integer> entry : map.entrySet()){
            int value = entry.getValue();
            if(value % 2 != 0) return entry.getKey();
        }
        return ' ';       
    }
}
// Approach 2 : iterate through string 1 put the characters and their count in the map, do the same for string 2,  iterate through string 2 and calculate the count, if the count % 2 != 0, return that character 
class Solution {
    public char findTheDifference(String s, String t) {
        HashMap<Character, Integer> map = new HashMap<>();
        for(char c: s.toCharArray()){
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        for(char c : t.toCharArray()){
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        for(int i = 0 ; i < t.length(); i++){
            int n = map.get(t.charAt(i));
            if(n%2 != 0) return t.charAt(i);
        }
        return ' ';
    }
}
// Approach 3 : Bitwise Operator - initialize a character 'c' and assign zero as its value, iterate through each character in the string 1 and do bitwise operation for each character with c, do the same with string 2 and return the character 
class Solution {
    public char findTheDifference(String s, String t) {
        char ch = 0;
        for(char c : s.toCharArray()){
            ch ^= c;
        }
        for(char c : t.toCharArray()){
            ch ^= c;
        }
        return ch;
    }
}

